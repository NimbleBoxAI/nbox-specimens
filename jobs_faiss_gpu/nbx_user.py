# This is an autogenerated nbx_user.py file for a [NBX](www.nimblebox.ai) app:
# project name: jobs_gpu_faiss
# created time: Monday W20 [ UTC 16 May, 2022 - 07:49:27 ]
#   created by: 

import os

os.environ["NBOX_LOG_LEVEL"] = "INFO" # Keep it the way you like

from nbox import Operator
from nbox.hyperloop.job_pb2 import Resource

from nbox.lib.shell import ShellCommand

class FaissTests(Operator):
  def __init__(self) -> None:
    super().__init__()

    self.test_1_flat = ShellCommand(f"./venv/bin/python {self._get_file('tests', '1-Flat.py')}")
    self.test_2_ivfflat = ShellCommand(f"./venv/bin/python {self._get_file('tests', '2-IVFFlat.py')}")
    self.test_3_ivfpq = ShellCommand(f"./venv/bin/python {self._get_file('tests', '3-IVFPQ.py')}")
    self.test_4_gpu = ShellCommand(f"./venv/bin/python {self._get_file('tests', '4-GPU.py')}")
    self.test_5_multiple_gpu = ShellCommand(f"./venv/bin/python {self._get_file('tests', '5-Multiple-GPU.py')}")

  def _get_file(self, *fp):
    # convert relative fp to absolute fp
    return os.path.join(os.path.dirname(__file__), *fp)

  def forward(self):
    self.test_1_flat()
    self.test_2_ivfflat()
    self.test_3_ivfpq()
    self.test_4_gpu()
    self.test_5_multiple_gpu()


def get_op() -> Operator:
  """Function to initialising your job, it might require passing a bunch of arguments.
  Use this function to get the operator by manually defining things here"""
  return FaissTests()

def get_resource() -> Resource:
  """Define your pod config here"""
  return Resource(
    cpu = "100m",         # 100mCPU
    memory = "200Mi",     # MiB
    disk_size = "1Gi",    # GiB
    gpu = "nvidia-tesla-k80", # nvidia-tesla-k80
    gpu_count = "1",       # 1 GPU
  )
